{"version":3,"sources":["components/Project.js","components/BlogPosts.js","App.js","serviceWorker.js","index.js"],"names":["Project","_ref","title","description","github","link","react_default","a","createElement","Card_default","style","backgroundColor","className","CardContent_default","Typography_default","variant","color","CardActions_default","Button_default","size","href","target","BlogPosts","console","log","blogPosts","marginTop","height","map","blogPost","marginBottom","fontSize","fontWeight","display","marginRight","Object","defineProperty","date","body","App","_useState","useState","_useState2","slicedToArray","tab","setTab","inWorks","inBlog","rows","works","reduce","acc","project","i","push","paddingTop","flexDirection","textDecoration","alignSelf","objectSpread","cursor","onClick","marginLeft","id","row","key","components_Project","components_BlogPosts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef750385.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Project = ({ title, description, github, link }) => (\n  <Card\n    style={{\n      backgroundColor: \"rgba(26, 26, 27, 0.8)\"\n      // border: \"1px solid rgb(52, 53, 54)\"\n    }}\n    className=\"project2\"\n  >\n    <CardContent>\n      <Typography variant=\"h5\" style={{ color: \"rgb(215, 218, 220)\" }}>\n        {title}\n      </Typography>\n      <Typography style={{ color: \"rgb(215, 218, 220)\" }}>\n        {description}\n      </Typography>\n    </CardContent>\n    <CardActions>\n      <Button\n        size=\"small\"\n        style={{ color: \"rgb(215, 218, 220)\" }}\n        href={github}\n        target=\"_blank\"\n      >\n        github\n      </Button>\n      <Button\n        size=\"small\"\n        style={{ color: \"rgb(215, 218, 220)\" }}\n        href={link}\n        target=\"_blank\"\n      >\n        link\n      </Button>\n    </CardActions>\n  </Card>\n);\n\nexport default Project;\n","import React from \"react\";\nimport blogPosts from \"../blogPosts.json\";\n\nconst BlogPosts = () => {\n  console.log(blogPosts, \"!!\");\n  return (\n    <div style={{ marginTop: 10, height: 800 }}>\n      {blogPosts.map(blogPost => (\n        <div style={{ marginBottom: 16 }}>\n          <p\n            style={{\n              color: \"rgb(215, 218, 220)\",\n              fontSize: 18,\n              fontWeight: \"bold\",\n              display: \"inline-block\",\n              marginRight: 10,\n              marginBottom: 5\n            }}\n          >\n            {blogPost.title}\n          </p>\n          <p\n            style={{\n              color: \"rgb(215, 218, 220)\",\n              fontSize: 14,\n              color: \"rgb(129, 131, 132)\",\n              display: \"inline-block\"\n            }}\n          >\n            {blogPost.date}\n          </p>\n          <p style={{ color: \"rgb(215, 218, 220)\" }}>{blogPost.body}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BlogPosts;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Project from \"./components/Project\";\nimport BlogPosts from \"./components/BlogPosts\";\nimport works from \"./works\";\n\nconst App = () => {\n  const [tab, setTab] = useState(\"works\");\n  const inWorks = tab === \"works\";\n  const inBlog = tab === \"blog\";\n  const rows = works.reduce(\n    (acc, project, i) => {\n      console.log(\"!!\", acc);\n      acc[i % 3].push(project);\n      return acc;\n    },\n    [[], [], []]\n  );\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <div\n          style={{ paddingTop: 50, display: \"flex\", flexDirection: \"column\" }}\n        >\n          <h2 style={{ color: \"rgb(66, 133, 244)\", marginBottom: 20 }}>\n            Nate K.\n          </h2>\n          <p style={{ color: \"white\", marginBottom: 5 }}>\n            Developer interested in Javascript and React.js\n          </p>\n          <a\n            style={{\n              color: \"white\",\n              textDecoration: \"underline\",\n              marginBottom: 30\n            }}\n            href=\"https://github.com/killynathan\"\n            target=\"_blank\"\n          >\n            github\n          </a>\n          <p style={{ color: \"white\", marginBottom: 5, alignSelf: \"center\" }}>\n            <span\n              style={{\n                ...(inWorks && {\n                  fontWeight: \"bold\",\n                  color: \"rgb(66, 133, 244)\"\n                }),\n                cursor: \"pointer\"\n              }}\n              onClick={() => setTab(\"works\")}\n            >\n              Works\n            </span>\n            <span style={{ fontSize: 12, marginLeft: 10, marginRight: 10 }}>\n              |\n            </span>\n            <span\n              style={{\n                ...(inBlog && {\n                  fontWeight: \"bold\",\n                  color: \"rgb(66, 133, 244)\"\n                }),\n                cursor: \"pointer\"\n              }}\n              onClick={() => setTab(\"blog\")}\n            >\n              Blog\n            </span>\n          </p>\n        </div>\n        {inWorks && (\n          <div className=\"App-header\">\n            <div id=\"projects\">\n              {rows.map((row, i) => (\n                <div className=\"projects-row\" key={i}>\n                  {row.map(project => (\n                    <div className=\"project-wrapper\">\n                      <Project {...project} />\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        {inBlog && <BlogPosts />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// masonary\n// var COL_COUNT = 4;\n// var col_heights = [],\n//   container = document.getElementById(\"projects\");\n// for (var i = 0; i <= COL_COUNT; i++) {\n//   col_heights.push(0);\n// }\n// for (var i = 0; i < container.children.length; i++) {\n//   var order = (i + 1) % COL_COUNT || COL_COUNT;\n//   container.children[i].style.order = order;\n//   col_heights[order] += parseFloat(container.children[i].style.height);\n// }\n// var highest = Math.max.apply(Math, col_heights);\n// container.style.height = highest + \"px\";\n// masonary end\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}